package apple

import (
	"fmt"
	"os"
	"path"
	"strconv"
	"strings"

	"hasseg.org/sanat/model"
)

func FormatSpecifierStringForFormatSpecifier(segment model.TranslationValueSegment) string {
	ret := "%"
	if 0 < segment.SemanticOrderIndex {
		ret += strconv.Itoa(segment.SemanticOrderIndex) + "$"
	}
	if segment.DataType == model.DataTypeFloat && 0 <= segment.NumberOfDecimals {
		ret += "." + strconv.Itoa(segment.NumberOfDecimals)
	}
	switch segment.DataType {
	case model.DataTypeString:
		ret += "s"
	case model.DataTypeInteger:
		ret += "d"
	case model.DataTypeFloat:
		ret += "f"
	case model.DataTypeObject:
		ret += "@"
	}
	return ret
}

func SanitizedForStringValue(text string) string {
	return strings.Replace(text, "%", "%%", -1)
}

func StringFromSegments(segments []model.TranslationValueSegment) string {
	ret := ""
	for _, segment := range segments {
		if segment.IsFormatSpecifier {
			ret += FormatSpecifierStringForFormatSpecifier(segment)
		} else {
			ret += SanitizedForStringValue(segment.Text)
		}
	}
	return ret
}

func getStringsFileContents(set model.TranslationSet, language string) string {
	ret := "/**\n" +
		" * Generated by `Sanat`\n" +
		" * Language: " + language + "\n" +
		" */\n\n"
	for _, section := range set.Sections {
		if 0 < len(section.Name) {
			ret += "\n/********** " + section.Name + " **********/\n\n"
		}
		for _, translation := range section.Translations {
			if !translation.IsForPlatform(model.PlatformApple) {
				continue
			}
			for _, value := range translation.Values {
				if value.Language == language {
					ret += fmt.Sprintf("\"%s\" = \"%s\";\n",
						translation.Key,
						StringFromSegments(value.Segments))
				}
			}
		}
	}
	return ret
}

func WriteStringsFiles(set model.TranslationSet, outDirPath string) {
	for language, _ := range set.Languages {
		lprojPath := path.Join(outDirPath, language+".lproj")
		os.MkdirAll(lprojPath, 0777)

		f, err := os.Create(path.Join(lprojPath, "Localizable.strings"))
		if err != nil {
			panic(err)
		}

		_, err = f.WriteString(getStringsFileContents(set, language))
		if err != nil {
			panic(err)
		}
	}
}
